apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.amlwin.build_varient_testing"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs{
        appleConfig{
            keyAlias keystoreProperties['appleKeyAlias']
            keyPassword keystoreProperties['appleKeyPassword']
            storeFile file(keystoreProperties['appleStoreFile'])
            storePassword keystoreProperties['appleStorePassword']
        }
        googleConfig{
            keyAlias keystoreProperties['googleKeyAlias']
            keyPassword keystoreProperties['googleKeyPassword']
            storeFile file(keystoreProperties['googleStoreFile'])
            storePassword keystoreProperties['googleStorePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    flavorDimensions "org"
    productFlavors {
        dev {
            applicationId "com.amlwin.build.dev"
            dimension = 'org'
        }
        apple {
            applicationId "com.apple.build"
            dimension = 'org'
            signingConfig  signingConfigs.appleConfig
        }
        google {
            applicationId "com.google.build"
            dimension = 'org'
            signingConfig  signingConfigs.appleConfig
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("dev") && variant.buildType.name == "release") {
            setIgnore(true)
        }
    }

    sourceSets { google { res.srcDirs = ['src/google/res', 'src/google/res/'] } }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
